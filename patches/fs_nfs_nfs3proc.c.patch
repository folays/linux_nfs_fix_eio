--- linux-source.orig/fs/nfs/nfs3proc.c	2014-01-20 03:40:07.000000000 +0100
+++ linux-source/fs/nfs/nfs3proc.c	2014-08-22 20:23:17.289579790 +0200
@@ -29,13 +29,45 @@
 nfs3_rpc_wrapper(struct rpc_clnt *clnt, struct rpc_message *msg, int flags)
 {
 	int res;
+	int retries = 0; /* used only for -EIO */
 	do {
 		res = rpc_call_sync(clnt, msg, flags);
-		if (res != -EJUKEBOX)
+		if (res == -EIO || retries > 0)
+		  printk(KERN_INFO "%s: (proc %d %s) call retry #%d res == %d\n", __func__,
+			 msg->rpc_proc->p_proc, msg->rpc_proc->p_name,
+			 retries, res);
+		if (res == -EIO && retries <= 4)
+		  {
+		    int retry_jiffies;
+		    switch (++retries)
+		      {
+		      case 1:
+			retry_jiffies = 20 * HZ / 1000;
 			break;
-		freezable_schedule_timeout_killable_unsafe(NFS_JUKEBOX_RETRY_TIME);
-		res = -ERESTARTSYS;
+		      case 2:
+			retry_jiffies = 100 * HZ / 1000;
+			break;
+		      case 3:
+			retry_jiffies = 1 * HZ;
+			break;
+		      default:
+			retry_jiffies = 5 * HZ;
+		      }
+		    freezable_schedule_timeout_killable_unsafe(retry_jiffies);
+		    res = -ERESTARTSYS;
+		  }
+		else if (res == -EJUKEBOX)
+		  {
+		    freezable_schedule_timeout_killable_unsafe(NFS_JUKEBOX_RETRY_TIME);
+		    res = -ERESTARTSYS;
+		  }
+		else
+		  break;
 	} while (!fatal_signal_pending(current));
+	if (res == -EIO || retries > 0)
+	  printk(KERN_INFO "%s: (proc %d %s) return retry #%d res == %d\n", __func__,
+		 msg->rpc_proc->p_proc, msg->rpc_proc->p_name,
+		 retries, res);
 	return res;
 }
 
@@ -55,6 +87,42 @@
 }
 
 static int
+nfs3_async_handle_eio(struct rpc_task *task, struct inode *inode)
+{
+	struct dentry *dentry;
+	char *name = NULL;
+	char *path = NULL;
+
+	if (task->tk_status != -EIO)
+		return 0;
+
+	dentry = d_find_alias(inode);
+
+	name = __getname();
+	if (name)
+	  {
+	    path = dentry_path_raw(dentry, name, PATH_MAX);
+	    if (IS_ERR(path))
+	      path = NULL;
+	  }
+
+	printk(KERN_INFO "%s : (proc %d %s) async done EIO dentry %pd | %s\n", __func__,
+	       task->tk_msg.rpc_proc->p_proc, task->tk_msg.rpc_proc->p_name, dentry,
+	       path);
+
+	if (name)
+	  __putname(name);
+
+	if (dentry)
+	  dput(dentry);
+
+	task->tk_status = 0;
+	rpc_restart_call(task);
+	rpc_delay(task, 100 * HZ / 1000);
+	return 1;
+}
+
+static int
 do_proc_get_root(struct rpc_clnt *client, struct nfs_fh *fhandle,
 		 struct nfs_fsinfo *info)
 {
@@ -439,6 +507,12 @@
 	struct nfs_removeres *res;
 	if (nfs3_async_handle_jukebox(task, dir))
 		return 0;
+	if (task->tk_status == -EIO)
+	  printk(KERN_INFO "%s: (proc %d %s) async done EIO\n", __func__,
+		 task->tk_msg.rpc_proc->p_proc, task->tk_msg.rpc_proc->p_name);
+	if (nfs3_async_handle_eio(task, dir))
+		return 0;
+
 	res = task->tk_msg.rpc_resp;
 	nfs_post_op_update_inode(dir, res->dir_attr);
 	return 1;
@@ -463,6 +537,11 @@
 
 	if (nfs3_async_handle_jukebox(task, old_dir))
 		return 0;
+	if (task->tk_status == -EIO)
+	  printk(KERN_INFO "%s: (proc %d %s) async done EIO\n", __func__,
+		 task->tk_msg.rpc_proc->p_proc, task->tk_msg.rpc_proc->p_name);
+	if (nfs3_async_handle_eio(task, old_dir))
+		return 0;
 	res = task->tk_msg.rpc_resp;
 
 	nfs_post_op_update_inode(old_dir, res->old_fattr);
@@ -815,6 +894,11 @@
 
 	if (nfs3_async_handle_jukebox(task, inode))
 		return -EAGAIN;
+	if (task->tk_status == -EIO)
+	  printk(KERN_INFO "%s: (proc %d %s) async done EIO\n", __func__,
+		 task->tk_msg.rpc_proc->p_proc, task->tk_msg.rpc_proc->p_name);
+	if (nfs3_async_handle_eio(task, inode))
+		return -EAGAIN;
 
 	nfs_invalidate_atime(inode);
 	nfs_refresh_inode(inode, &data->fattr);
@@ -838,6 +922,11 @@
 
 	if (nfs3_async_handle_jukebox(task, inode))
 		return -EAGAIN;
+	if (task->tk_status == -EIO)
+	  printk(KERN_INFO "%s: (proc %d %s) async done EIO\n", __func__,
+		 task->tk_msg.rpc_proc->p_proc, task->tk_msg.rpc_proc->p_name);
+	if (nfs3_async_handle_eio(task, inode))
+		return -EAGAIN;
 	if (task->tk_status >= 0)
 		nfs_post_op_update_inode_force_wcc(inode, data->res.fattr);
 	return 0;
@@ -863,6 +952,11 @@
 {
 	if (nfs3_async_handle_jukebox(task, data->inode))
 		return -EAGAIN;
+	if (task->tk_status == -EIO)
+	  printk(KERN_INFO "%s: (proc %d %s) async done EIO\n", __func__,
+		 task->tk_msg.rpc_proc->p_proc, task->tk_msg.rpc_proc->p_name);
+	if (nfs3_async_handle_eio(task, data->inode))
+		return -EAGAIN;
 	nfs_refresh_inode(data->inode, data->res.fattr);
 	return 0;
 }
